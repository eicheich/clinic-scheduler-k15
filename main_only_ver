import json
from datetime import datetime

# ------------------- Data Classes -------------------
class Schedule:
    def __init__(self, date, time, user_name=None):
        self.date = date
        self.time = time
        self.user_name = user_name

    def to_dict(self):
        return {
            "date": self.date,
            "time": self.time,
            "user_name": self.user_name
        }

    @staticmethod
    def from_dict(data):
        return Schedule(data["date"], data["time"], data.get("user_name"))

class Doctor:
    def __init__(self, doctor_id, name, specialization, schedules=None):
        self.id = doctor_id
        self.name = name
        self.specialization = specialization
        self.schedules = schedules if schedules else []

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "specialization": self.specialization,
            "schedules": [s.to_dict() for s in self.schedules]
        }

    @staticmethod
    def from_dict(data):
        schedules = [Schedule.from_dict(s) for s in data.get("schedules", [])]
        return Doctor(data["id"], data["name"], data["specialization"], schedules)

# ------------------- Role Classes -------------------
class Admin:
    def __init__(self, name):
        self.name = name

    def add_doctor(self, doctor_list, doctor):
        doctor_list.append(doctor)

    def add_schedule(self, doctor, schedule):
        doctor.schedules.append(schedule)

    def view_all_schedules(self, doctor_list):
        for d in doctor_list:
            print(f"\nDoctor {d.name} ({d.specialization}):")
            for idx, s in enumerate(d.schedules):
                status = s.user_name if s.user_name else "Available"
                print(f"  [{idx}] {s.date} {s.time} - {status}")

class User:
    def __init__(self, name):
        self.name = name

    def view_available_schedules(self, doctor_list):
        for d in doctor_list:
            print(f"\nDoctor {d.name} ({d.specialization}):")
            for idx, s in enumerate(d.schedules):
                if not s.user_name:
                    print(f"  [{idx}] {s.date} {s.time} (Available)")

    def book_schedule(self, doctor, schedule_idx):
        if 0 <= schedule_idx < len(doctor.schedules):
            if doctor.schedules[schedule_idx].user_name is None:
                doctor.schedules[schedule_idx].user_name = self.name
                return True
        return False

# ------------------- Utility Functions -------------------
def load_data(filename):
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
            return [Doctor.from_dict(d) for d in data]
    except FileNotFoundError:
        return []

def save_data(filename, doctor_list):
    with open(filename, 'w') as f:
        json.dump([d.to_dict() for d in doctor_list], f, indent=4)

def remove_expired_bookings(doctor_list):
    now = datetime.now()
    for doc in doctor_list:
        for s in doc.schedules:
            schedule_time = datetime.strptime(f"{s.date} {s.time}", "%Y-%m-%d %H:%M")
            if s.user_name and schedule_time < now:
                s.user_name = None

# ------------------- Entry Point -------------------
def main():
    doctor_list = load_data("doctors.json")
    remove_expired_bookings(doctor_list)

    welcome_message = "----------Welcome to TOKI DOKI------------"
    description = "We are providing the best system for hospitals to transform their system to digital so that they can provide the best service for their patients"
    login_prompt = "Please login as admin or user"

    print(welcome_message.center(1000))
    print(description.center(80))
    print(login_prompt.center(80))
    role = input("Login as (admin/user): ").strip().lower()

    if role == "admin":
        admin = Admin("Admin")
        while True:
            print("\n1. Add Doctor\n2. Add Schedule\n3. View All Schedules\n4. Save & Exit")
            choice = input("Choose: ")

            if choice == "1":
                try:
                    doc_id = int(input("Doctor ID: "))
                except ValueError:
                    print("Doctor ID must be a number.")
                    continue
                name = input("Name: ")
                spec = input("Specialization: ")
                doctor = Doctor(doc_id, name, spec)
                admin.add_doctor(doctor_list, doctor)
            elif choice == "2":
                for idx, d in enumerate(doctor_list):
                    print(f"{idx + 1}. {d.name} ({d.specialization})")
                try:
                    d_idx = int(input("Choose doctor index: ")) - 1
                except ValueError:
                    print("Invalid index.")
                    continue
                if d_idx < 0 or d_idx >= len(doctor_list):
                    print("Invalid doctor index.")
                    continue
                doctor = doctor_list[d_idx]
                d_idx = int(input("Choose doctor index: "))
                try:
                    date = input("Schedule date (YYYY-MM-DD): ")
                    datetime.strptime(date, "%Y-%m-%d")
                except ValueError:
                    print("Invalid date format.")
                    continue

                try:
                    time = input("Schedule time (HH:MM): ")
                    datetime.strptime(time, "%H:%M")
                except ValueError:
                    print("Invalid time format.")
                    continue
                schedule = Schedule(date, time)
                admin.add_schedule(doctor_list[d_idx], schedule)
            elif choice == "3":
                admin.view_all_schedules(doctor_list)
            elif choice == "4":
                break

    elif role == "user":
        user_name = input("Enter your name: ")
        user = User(user_name)
        user.view_available_schedules(doctor_list)

        doc_id = input("Enter Doctor ID to book: ")
        doctor = next((d for d in doctor_list if d.id == doc_id), None)

        if doctor:
            schedule_idx = int(input("Enter schedule index to book: "))
            success = user.book_schedule(doctor, schedule_idx)
            if success:
                print("Appointment booked successfully.")
            else:
                print("Schedule already booked or invalid.")
        else:
            print("Doctor not found.")

    save_data("doctors.json", doctor_list)

if __name__ == "__main__":
    main()
